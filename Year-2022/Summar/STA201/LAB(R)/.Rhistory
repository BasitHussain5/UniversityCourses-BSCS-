print("Hi")
modle1 <- "Hello"
typeof(model1)
type(modle1)
typeof(modle1)
x <- 100
typeof(x)
x <- 10L
typeof(x)
5+3
6-8
2*5
2**7
2**2
2%2
x <- 100
y <-200
x == y
x != y
y>x
x>=y
print("Hello")
print("Hello", "Basit")
print((past("Hello", "Basit")))
x = 1:10
x
#hu
L
# Variable
# Variable: are use dto store data with named locations that your programs can manipulate.
# A variable name can be a combinaton of letters, digits, period and underscore.
# valid variables( total,   sum,   .count,   var)
# invalid Variables(tot@l, 5um, _count, TRUE, .Oar)
# Assignment Variables:
x <- 10
x
.y <- 20
.y
z <- x+.y
z
.2pair <- "Hi"
.2pair <- 100
.pairs <- 100
.pairs
animal = "Tiger"
animal
# Operators:
# Arthemathic Operators:
# Addition:
x <- 10
y <- 20
z <- z+y
z
# Subtraction:
> x <- 10
> x <- 10
5-2
5*2
1 > 2 & 0 > 1
1 > 2 | 0 > 1
1 > 2 & 0 < 1
1 < 2 & 0 < 1
1 < 2 | 0 < 1
typeof(x)
typeof(animal)
classof(animal)
class(animal)
class(y)
a <- 10L
class(a)
typeof(a)
length(animal)
length(a)
print(paste("Hi", "Basit"))
print(paste("Hi", "Basit", sep="-"))
paste0("Hi", "Basit")
# numeric
x <- c
x
clear
# Vectors of object
# The c() function can be used to create vectors of objects.
x <- c(0.5, 0.6) ## numeric
x <- c(TRUE, FALSE) ## logical
x <- c(T, F)   ## logical
x <- c("a", "b", "c")  ## character
x <- 9:29  ## integer
x <- x(1+0i, 2+4i)  ## complex
x
# Usig the vector function
x <- vector("numeric", length = 10)
x
x <- 0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
as.complex(x)
as.numeric(x)
# List
x <- list(1, "a", TRUE, 2+2i)
x
# Matrices
x <- matrix(nrow = 2, ncol =3)
x
dim(x)
attributes(x)
x <- matrix(1:6, nrow=2, ncol=5)
x
m <- 1:10
m
dim(m)
dim(m) <- c(2,5)
m
x <- 1:3
y <- 10:12
obind(x,y)
x y
cbind(x,y)
rbind(x,y)
# Factor
x <- factor(c("yes", "yes","no","yes", "no"))
x
table(x)
uncalss()x
unclass(x)
# Missing Value
x <- x(1,2,NA,10,22)
is.na(x)
is.nan(x)
vec <- c(90,178,547,453,189,377,264,333,289,391,320,300,210,310,121,154,248,292,368,423)
vec
result.mean <- mean(vec)
print(result.mean)
result.median <- median(vec)
print(result.median)
result.sd <- sd(vec)
print(result.sd)
> vec <- c(90,178,547,453,189,377,264,333,289,391,320,300,210,310,121,154,248,292,368,423)
# Q1. Create the following vector-
# 90, 178, 547, 453, 189, 377, 264, 333, 289, 391, 320, 300,210, 310, 121, 154, 248, 292,
368, 423
result.median < \
# Q.01
# Creat a vector
vector <- vec(90,178,547,453,189,377,264,333,289,391,320,300,210,310,121,154,248,292,368,423)
# Q.01
> # Creat a vector
# Q.01
# creating a vector
vector <- vec(90,178,547,453,189,377,264,333,289,391,320,300,210,310,121,154,248,292,368,423)
# Q. 01
# Creating a  Vector
vector <- c(90,178,547,453,189,377,264,333,289,391,320,300,210,310,121,154,248,292,368,423)
print("Vector: ", vector)
# Q. 01
# Creating a vector
vector <- c(90,178,547,453,189,377,264,333,289,391,320,300,210,310,121,154,248,292,368,423)
print(vector)
# Finding Mean
result.mean <- mean(vector)
print(result.mean)
# Finding Median
result.median <- median(vector)
print(result.median)
# Finding Standard Deviation
result.sd <- sd(vector)
print(result.sd)
# (ii)
# Find square root of all values
for (i in vector)
print(sqrt(i))
# (iii)
# Sort the values
result.sort <- sort(vector)
print(result.sort)
# (iv)
# Find the length of the vector
result.length = length(vector)
print(result.length)
# (v)
# Find summation and product of all values
result.sum = sum(vector)
print(result.sum)
result.pro = prod(vector)
print(result.pro)
